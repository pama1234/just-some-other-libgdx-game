package org.eclipse.tm4e.languageconfiguration.internal.widgets;

import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.jface.viewers.IBaseLabelProvider;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerComparator;

import pama1234.gdx.textmate.DeprecatedJface;

@DeprecatedJface
public final class ColumnViewerComparator extends ViewerComparator{
  private int fSortColumn=0;
  private int fSortOrder=1; // 1 = asc, -1 = desc
  public int getDirection() {
    // return fSortOrder==1?SWT.DOWN:SWT.UP;
    return fSortOrder==1?1024:128;
  }
  public void setColumn(final int column) {
    if(column==fSortColumn) {
      fSortOrder*=-1;
    }else {
      fSortColumn=column;
      fSortOrder=1;
    }
  }
  @Override
  public int compare(@Nullable final Viewer viewer,@Nullable final Object e1,@Nullable final Object e2) {
    if(viewer instanceof final TableViewer tableViewer) {
      final IBaseLabelProvider baseLabel=tableViewer.getLabelProvider();
      final String left=((ITableLabelProvider)baseLabel).getColumnText(e1,fSortColumn);
      final String right=((ITableLabelProvider)baseLabel).getColumnText(e2,fSortColumn);
      final int sortResult=getComparator()
        .compare(left!=null?left:"",right!=null?right:""); //$NON-NLS-1$ //$NON-NLS-2$
      return sortResult*fSortOrder;
    }
    return super.compare(viewer,e1,e2);
  }
}
