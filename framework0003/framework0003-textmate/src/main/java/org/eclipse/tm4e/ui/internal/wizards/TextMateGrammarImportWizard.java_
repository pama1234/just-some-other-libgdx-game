package org.eclipse.tm4e.ui.internal.wizards;

import static org.eclipse.tm4e.core.internal.utils.NullSafetyHelper.lazyNonNull;

import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.tm4e.registry.IGrammarDefinition;
import org.eclipse.tm4e.registry.IGrammarRegistryManager;
import org.eclipse.tm4e.registry.TMEclipseRegistryPlugin;
import org.eclipse.ui.IImportWizard;
import org.eclipse.ui.IWorkbench;
import org.osgi.service.prefs.BackingStoreException;

import pama1234.gdx.textmate.DeprecatedSwt;

@DeprecatedSwt
@Deprecated
public final class TextMateGrammarImportWizard extends Wizard implements IImportWizard{
  private SelectGrammarWizardPage mainPage=lazyNonNull();
  @Nullable
  private IGrammarDefinition createdDefinition;
  private IGrammarRegistryManager grammarRegistryManager=TMEclipseRegistryPlugin.getGrammarRegistryManager();
  private final boolean save;
  public TextMateGrammarImportWizard(final boolean save) {
    this.save=save;
  }
  public void setGrammarRegistryManager(final IGrammarRegistryManager grammarRegistryManager) {
    this.grammarRegistryManager=grammarRegistryManager;
  }
  @Override
  public void addPages() {
    mainPage=new SelectGrammarWizardPage();
    addPage(mainPage);
  }
  @Override
  public boolean performFinish() {
    final IGrammarDefinition definition=mainPage.getGrammarDefinition();
    grammarRegistryManager.registerGrammarDefinition(definition);
    if(save) {
      try {
        grammarRegistryManager.save();
      }catch(final BackingStoreException e) {
        e.printStackTrace();
        return false;
      }
    }
    createdDefinition=definition;
    return true;
  }
  @Override
  public void init(@Nullable final IWorkbench workbench,@Nullable final IStructuredSelection selection) {}
  @Nullable
  public IGrammarDefinition getCreatedDefinition() {
    return createdDefinition;
  }
}
