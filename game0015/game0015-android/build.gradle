apply plugin: 'com.android.application'

configurations {
  configureEach {
    // exclude group: "$pama1234RepoLocation", module: "server-framework"
    // exclude group: "javax.vecmath", module: "*"
    // exclude group: "com.esotericsoftware", module: "*"
    // exclude group: "com.google.code.gson", module: "*"
    // exclude group: "org.yaml", module: "*"
    // exclude group: "io.netty", module: "*"
  }
}

android {
  namespace 'pama1234.game0015'
  compileSdk project.properties.compileSdkVersion.toInteger()
  signingConfigs {
    release {
      // storeFile file('sign.jks')
      // storePassword ''
      // keyAlias 'xxx'
      // keyPassword ''
    }
  }
  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src/main/java']
      aidl.srcDirs = ['src/main/java']
      renderscript.srcDirs = ['src/main/java']
      res.srcDirs = ['res']
      assets.srcDirs = ['../../assets' , '../assets']
      jniLibs.srcDirs = ['libs']
    }
  }
  packagingOptions {
    resources.pickFirsts += "**/*"
    // pickFirst "javax/vecmath/ExceptionStrings.properties"
    // Preventing from license violations (more or less):
    pickFirst 'META-INF/LICENSE.txt'
    pickFirst 'META-INF/LICENSE'
    pickFirst 'META-INF/license.txt'
    pickFirst 'META-INF/LGPL2.1'
    pickFirst 'META-INF/NOTICE.txt'
    pickFirst 'META-INF/NOTICE'
    pickFirst 'META-INF/notice.txt'
    // pickFirst 'license/README.dom.txt'
    // pickFirst 'license/LICENSE.sac.html'
    // pickFirst 'license/LICENSE.dom-documentation.txt'
    pickFirst 'license/*'
    pickFirst 'about_files/LICENSE-2.0.txt'
    // Excluding unnecessary meta-data:
    exclude 'META-INF/robovm/ios/robovm.xml'
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/dependencies.txt'
  }
  defaultConfig {
    applicationId 'pama1234.gdx.game.app.ide.center'
    minSdkVersion project.properties.minSdkVersion.toInteger()
    targetSdkVersion project.properties.targetSdkVersion.toInteger()
    versionCode 1
    versionName "1.0"
    multiDexEnabled true
  }
  compileOptions {
    sourceCompatibility "17"
    targetCompatibility "17"
    coreLibraryDesugaringEnabled true
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      signingConfig signingConfigs.release
    }
  }
}

Properties props = new Properties()
def propFile = rootProject.file('/doc/signing/signing.properties')
if (propFile.canRead()){
  props.load(new FileInputStream(propFile))

  if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
      props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

    android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
    android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
    android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
    android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
  } else {
    android.buildTypes.release.signingConfig = null
  }
}else {
  android.buildTypes.release.signingConfig = null
}

repositories {
  // needed for AAPT2, may be needed for other tools
  google()
}

configurations { natives }

dependencies {
  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

  // implementation project(":game0001:game0001-core")
  implementation project(":game0007:game0007-core")
  implementation "$pama1234RepoLocation:android-framework:$pama1234PublishVersion"

  implementation "com.google.android.material:material:1.11.0"
  implementation "androidx.navigation:navigation-ui:2.7.6"
  implementation "androidx.lifecycle:lifecycle-livedata:2.7.0"
  implementation "androidx.constraintlayout:constraintlayout:2.1.4"
  implementation "androidx.navigation:navigation-fragment:2.7.6"
  implementation "androidx.appcompat:appcompat:1.6.1"
  implementation "androidx.lifecycle:lifecycle-viewmodel:2.7.0"

  implementation "$gdxModule:gdx-backend-android:$gdxVersion"
  implementation "com.github.simplepeng.SpiderMan:spiderman:$spidermanVersion" //如果程序异常闪退提供log

  implementation "$gdxCustomModule:gdx:$gdxCustomVersion"
  implementation "$gdxCustomModule:gdx-box2d:$gdxCustomVersion"
  implementation "$gdxCustomModule:gdx-freetype:$gdxCustomVersion"
  implementation "$gdxCustomModule:gdx-bullet:$gdxCustomVersion"

  implementation 'com.badlogicgames.gdx:gdx-ai:1.8.2'
  implementation 'com.squidpony:squidlib-util:3.0.6'
  implementation fileTree(dir: 'libs' , include: ['*.jar'])

  natives "$gdxModule:gdx-platform:$gdxVersion:natives-arm64-v8a"
  natives "$gdxModule:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
  natives "$gdxModule:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
  natives "$gdxModule:gdx-bullet-platform:$gdxVersion:natives-arm64-v8a"
}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
  doFirst {
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.copy().files.each { jar ->
      def outputDir = null
      if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
      if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
      if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
      if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
      if (outputDir != null) {
        copy {
          from zipTree(jar)
          into outputDir
          include "*.so"
        }
      }
    }
  }
}

tasks.configureEach { packageTask ->
  if (packageTask.name.contains("package")) {
    packageTask.dependsOn 'copyAndroidNatives'
  }
}

tasks.register('run', Exec) {
  def path
  def localProperties = project.file("../local.properties")
  if (localProperties.exists()) {
    Properties properties = new Properties()
    localProperties.withInputStream { instr ->
      properties.load(instr)
    }
    def sdkDir = properties.getProperty('sdk.dir')
    if (sdkDir) {
      path = sdkDir
    } else {
      path = "$System.env.ANDROID_SDK_ROOT"
    }
  } else {
    path = "$System.env.ANDROID_SDK_ROOT"
  }

  def adb = path + "/platform-tools/adb"
  commandLine "$adb", 'shell', 'am', 'start', '-n', 'pama1234.gdx.game.app/pama1234.gdx.game.app.android.AndroidLauncher'
}

// tasks.whenTaskAdded { task ->
//   if (task.name == 'checkDebugDuplicateClasses') {
//     task.enabled = false
//   }
// }

eclipse.project.name = appName + '0015-android'
