apply plugin: 'com.android.application'


android {
  namespace 'pama1234.game0006'
	compileSdk project.properties.compileSdkVersion.toInteger()
  signingConfigs {
    release {
      // storeFile file('sign.jks')
      // storePassword ''
      // keyAlias 'xxx'
      // keyPassword ''
    }
  }
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src/main/java']
			aidl.srcDirs = ['src/main/java']
			renderscript.srcDirs = ['src/main/java']
			res.srcDirs = ['res']
      assets.srcDirs = ['../../assets' , '../assets']
			jniLibs.srcDirs = ['libs']
		}
	}
	packagingOptions {
		// resources.pickFirsts += [ 
		// 	// "tables/CR_In_Spacing_Modifier_Letters.bin",
		// 	// "tables/CR_In_Variation_Selectors.bin",
		// 	"tables/*.bin",
		// 	"lombok/**",
		// 	"Class50/**",
		// 	"META-INF/native-image/**",
		// 	"org/eclipse/**",
		// 	"src/org/eclipse/jdt/**",
		// 	"OSGI-OPT/src/org/osgi/**",
		// 	"textmate/**",
		// 	"com/badlogic/gdx/**",
		// 	"com/badlogic/**",
		// 	"com/android/tools/r8/**",
		// 	"ant_tasks/**",
		// 	"org/objectweb/asm/**",
		// 	"org/apache/batik/**",
		// 	"org/apache/xmlgraphics/**",
		// 	"com/zwitserloot/cmdreader/**",
		// 	"OSGI-INF/**",
		// 	"resources/**",
		// 	"dev/lyze/gdxtinyvg/**",
		// 	"dev/lyze/**",
		// 	"pama1234/util/textmate/**"
		//  ]
    resources.pickFirsts += "**/*"
    // pickFirst "javax/vecmath/ExceptionStrings.properties"
		// Preventing from license violations (more or less):
		pickFirst 'META-INF/LICENSE.txt'
		pickFirst 'META-INF/LICENSE'
		pickFirst 'META-INF/license.txt'
		pickFirst 'META-INF/LGPL2.1'
		pickFirst 'META-INF/NOTICE.txt'
		pickFirst 'META-INF/NOTICE'
		pickFirst 'META-INF/notice.txt'
		// pickFirst 'license/README.dom.txt'
		// pickFirst 'license/LICENSE.sac.html'
		// pickFirst 'license/LICENSE.dom-documentation.txt'
		pickFirst 'license/*'
		pickFirst 'about_files/LICENSE-2.0.txt'
		// Excluding unnecessary meta-data:
		exclude 'META-INF/robovm/ios/robovm.xml'
		exclude 'META-INF/DEPENDENCIES.txt'
		exclude 'META-INF/DEPENDENCIES'
		exclude 'META-INF/dependencies.txt'

		// pickFirst "JavaSE-*.profile"
		// pickFirst "JavaSE*.profile"
		// pickFirst "J2SE-*.profile"
		// pickFirst "JRE-*.profile"
		// pickFirst 'META-INF/**'

		// pickFirst 'Log4j-*'
		// pickFirst 'systembundle.properties'
		// pickFirst 'OSGi_Minimum-1.0.profile'
		// pickFirst 'CDC-*.profile'
		// pickFirst 'r8-version.properties'
		// pickFirst 'jdtCompilerAdapter.jar'
		// pickFirst 'space/earlygrey/shapedrawer.gwt.xml'
		// pickFirst 'OSGi_Minimum-*.profile'
		// pickFirst 'org.codehaus.commons.compiler.properties'
		// pickFirst 'javax/vecmath/ExceptionStrings.properties'

		// exclude 'README.md'
		// exclude 'latestchanges.html'
		// exclude 'changelog.txt'
		// exclude 'bundle.properties'
		// exclude 'profile.list'
		// exclude 'AUTHORS'
		// exclude 'release-timestamp.txt'
		// exclude 'plugin.xml'
		// exclude 'plugin.properties'
		// exclude 'about_files/NOTICE.txt'
	}
	defaultConfig {
		applicationId 'pama1234.gdx.game.app.ide.center'
		minSdkVersion 26
		targetSdkVersion 33
		versionCode 1
		versionName "1.0"
		multiDexEnabled true
	}
	compileOptions {
		sourceCompatibility "17"
		targetCompatibility "17"
		coreLibraryDesugaringEnabled true
	}

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      
      signingConfig signingConfigs.release
    }
  }

}

def Properties props = new Properties()
  def propFile = file('./signing.properties')
  if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

      android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
      android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
      android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
      android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
      android.buildTypes.release.signingConfig = null
    }
  }else {
    android.buildTypes.release.signingConfig = null
  }

repositories {
	// needed for AAPT2, may be needed for other tools
	google()
}

configurations { natives }

dependencies {
  coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$androidDesugarVersion"

	implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
  implementation "com.github.simplepeng.SpiderMan:spiderman:$spidermanVersion"//如果程序异常闪退提供log

	implementation project(':framework0003:framework0003-androidDex')

	implementation project(':framework')
	implementation project(':server-framework')
  implementation project(':android-framework')

	implementation project(':game0006:game0006-core')

  implementation project(':framework0004:framework0004-terminal-android')
	// implementation (project(':game0006:game0006-core'))
  // { exclude group: "org.jruby.jcodings", module: "jcodings" }

  // implementation 'org.jruby.jcodings:jcodings:1.0.58'

	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

	// This follows advice from https://blog.gradle.org/log4j-vulnerability
	constraints {
		implementation("org.apache.logging.log4j:log4j-core") {
			version {
				strictly("[2.17, 3[")
				prefer("2.17.0")
			}
			because("CVE-2021-44228, CVE-2021-45046, CVE-2021-45105: Log4j vulnerable to remote code execution and other critical security vulnerabilities")
		}
	}
}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
	doFirst {
		file("libs/armeabi-v7a/").mkdirs()
		file("libs/arm64-v8a/").mkdirs()
		file("libs/x86_64/").mkdirs()
		file("libs/x86/").mkdirs()

		configurations.natives.copy().files.each { jar ->
			def outputDir = null
			if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
			if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
			if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
			if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
			if (outputDir != null) {
				copy {
					from zipTree(jar)
					into outputDir
					include "*.so"
				}
			}
		}
	}
}

tasks.configureEach { packageTask ->
  if (packageTask.name.contains("package")) {
    packageTask.dependsOn 'copyAndroidNatives'
  }
}

tasks.register('run', Exec) {
	def path
	def localProperties = project.file("../local.properties")
	if (localProperties.exists()) {
		Properties properties = new Properties()
		localProperties.withInputStream { instr ->
			properties.load(instr)
		}
		def sdkDir = properties.getProperty('sdk.dir')
		if (sdkDir) {
			path = sdkDir
		} else {
			path = "$System.env.ANDROID_SDK_ROOT"
		}
	} else {
		path = "$System.env.ANDROID_SDK_ROOT"
	}

	def adb = path + "/platform-tools/adb"
	commandLine "$adb", 'shell', 'am', 'start', '-n', 'pama1234.gdx.game.app/pama1234.gdx.game.app.android.AndroidLauncher'
}

// tasks.whenTaskAdded { task ->
//   if (task.name == 'checkDebugDuplicateClasses') {
//     task.enabled = false
//   }
// }

eclipse.project.name = appName + '0006-android'
