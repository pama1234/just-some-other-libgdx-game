apply plugin: "com.android.library"
apply plugin: 'maven-publish'

android {
  namespace 'pama1234.util'

  compileSdk project.properties.compileSdkVersion.toInteger()
  ndkVersion = System.getenv("JITPACK_NDK_VERSION") ?: project.properties.ndkVersion
  signingConfigs {
    release {
      // storeFile file('sign.jks')
      // storePassword ''
      // keyAlias 'xxx'
      // keyPassword ''
    }
  }
  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src/main/java']
      aidl.srcDirs = ['src/main/java']
      renderscript.srcDirs = ['src/main/java']
      res.srcDirs = ['res']
      assets.srcDirs = ['../../assets' , '../assets']
      jniLibs.srcDirs = ['libs']
    }
  }
  packagingOptions {
    resources.pickFirsts += "**/*"
  }
  defaultConfig {
    minSdkVersion project.properties.minSdkVersion.toInteger()
    targetSdkVersion project.properties.targetSdkVersion.toInteger()
    versionCode 1
    versionName "1.0"
    multiDexEnabled true

    externalNativeBuild {
      ndkBuild {
        cFlags "-std=c11", "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
      }
    }

    ndk {
      abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
    }
  }
  compileOptions {
    encoding = 'UTF-8'
    sourceCompatibility "17"
    targetCompatibility "17"
    coreLibraryDesugaringEnabled true
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      signingConfig signingConfigs.release
    }
  }
  externalNativeBuild {
    ndkBuild {
      path "src/main/jni/Android.mk"
    }
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }
}

tasks.withType(Test).configureEach {
  testLogging {
    events "started", "passed", "skipped", "failed"
  }
}

tasks.register('sourceJar', Jar) {
  from android.sourceSets.main.java.srcDirs
  archiveClassifier.set("sources")
}

afterEvaluate {
  publishing {
    publications {
      // Creates a Maven publication called "release".
      release(MavenPublication) {
        // println("Components: " + components*.name)
        //         from components.release
        groupId = 'com.termux'
        artifactId = 'terminal-emulator'
        version = '0.118.0'
        artifact(sourceJar)
      }
    }
  }
}


def Properties props = new Properties()
def propFile = file('./signing.properties')
if (propFile.canRead()){
  props.load(new FileInputStream(propFile))

  if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
      props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

    android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
    android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
    android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
    android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
  } else {
    android.buildTypes.release.signingConfig = null
  }
}else {
  android.buildTypes.release.signingConfig = null
}

repositories {
  // needed for AAPT2, may be needed for other tools
  mavenCentral()
  maven { url 'https://maven.scijava.org/content/repositories/public/' }
  maven { url 'https://jitpack.io' }
  google()
}

dependencies {
  coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$androidDesugarVersion"

  implementation project(':server-framework')
  implementation project(':framework0004:framework0004-terminal')

  implementation "androidx.annotation:annotation:1.6.0"

  // This follows advice from https://blog.gradle.org/log4j-vulnerability
  constraints {
    implementation("org.apache.logging.log4j:log4j-core") {
      version {
        strictly("[2.17, 3[")
        prefer("2.17.0")
      }
      because("CVE-2021-44228, CVE-2021-45046, CVE-2021-45105: Log4j vulnerable to remote code execution and other critical security vulnerabilities")
    }
  }
}

eclipse.project.name = appName + '-android-terminal'
